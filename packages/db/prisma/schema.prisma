generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String              @id @default(uuid())
  email                String
  imageUrl             String?
  externalId           String              @unique
  emailNotifications   Boolean             @default(true)
  websites             Website[]
  Heartbeat            Heartbeat[]
  MaintenanceWindow    MaintenanceWindow[]
  Incident             Incident[]
  FCMTOKEN             String?
  cleakOrganizationIds String[]            @default([]) @map("cleak_organization_ids")

  Connections Connections[]

  Slack Slack[]

  DiscordWebhook DiscordWebhook[]
}

model Website {
  id       String        @id @default(uuid())
  url      String
  userId   String
  orgId    String?
  interval Int           @default(60)
  ticks    WebsiteTick[]
  disabled Boolean       @default(false)
  user     User          @relation(fields: [userId], references: [id])

  Incident Incident[]
}

model WebsiteTick {
  id        String        @id @default(uuid())
  websiteId String
  createdAt DateTime
  status    WebsiteStatus
  latency   Float
  website   Website       @relation(fields: [websiteId], references: [id])
}

model Heartbeat {
  id              String            @id @default(uuid())
  userId          String
  name            String
  interval        Int
  gracePeriod     Int
  escalation      Json?
  maintenance     Json?
  metadata        Json?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  status          HeartbeatStatus   @default(UP)
  user            User              @relation(fields: [userId], references: [id])
  orgId           String?
  HeartbeatRecord HeartbeatRecord[]

  Incident Incident[]
}

model HeartbeatRecord {
  id          String          @id @default(uuid())
  heartbeatId String
  status      HeartbeatStatus
  timestamp   DateTime        @default(now())
  metadata    Json?
  heartbeat   Heartbeat       @relation(fields: [heartbeatId], references: [id])
}

enum HeartbeatStatus {
  DOWN
  ACHNOWLEDGED
  UP
}

enum WebsiteStatus {
  Good
  Bad
}

model MaintenanceWindow {
  id        String   @id @default(uuid())
  userId    String
  date      DateTime
  timeSlot  String
  repeat    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  orgId     String?
}

model Incident {
  id          String         @id @default(uuid())
  status      IncidentStatus
  errorCode   String
  errorText   String
  comments    Int            @default(0)
  date        DateTime
  duration    Int
  userId      String
  user        User           @relation(fields: [userId], references: [id])
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  orgId       String?
  websiteId   String?        @map("website_id")
  heartbeatId String?        @map("heartbeat_id")
  website     Website?       @relation(fields: [websiteId], references: [id])
  heartbeat   Heartbeat?     @relation(fields: [heartbeatId], references: [id])
  cause       String?
  escalation  String?
  Timeline    Timeline[]
}

model Timeline {
  id         Int      @id @default(autoincrement())
  type       String
  message    String
  recipient  String?
  time       String
  incident   Incident @relation(fields: [incidentId], references: [id])
  incidentId String
}

enum IncidentStatus {
  Ongoing
  Resolved
  Acknowledged
}


model DiscordWebhook {
  id          String        @id @default(uuid())
  webhookId   String        @unique
  url         String        @unique
  name        String
  guildName   String
  guildId     String
  channelId   String        @unique
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  connections Connections[]
}

model Slack {
  id               String        @id @default(uuid())
  appId            String
  authedUserId     String
  authedUserToken  String        @unique
  slackAccessToken String        @unique
  botUserId        String
  teamId           String
  teamName         String
  userId           String
  user             User          @relation(fields: [userId], references: [id])
  connections      Connections[]
}

model Connections {
  id               String  @id @default(uuid())
  type             String
  email            String?
  discordWebhookId String?
  slackId          String?
  userId           String?

  DiscordWebhook DiscordWebhook? @relation(fields: [discordWebhookId], references: [id])
  Slack          Slack?          @relation(fields: [slackId], references: [id])
  User           User?           @relation(fields: [userId], references: [id])
}
